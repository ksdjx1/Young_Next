"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _react2 = require("@iconify/react");

var _playCircle = _interopRequireDefault(require("@iconify/icons-mdi/play-circle"));

var _pauseCircle = _interopRequireDefault(require("@iconify/icons-mdi/pause-circle"));

var _skipPrevious = _interopRequireDefault(require("@iconify/icons-mdi/skip-previous"));

var _skipNext = _interopRequireDefault(require("@iconify/icons-mdi/skip-next"));

var _fastForward = _interopRequireDefault(require("@iconify/icons-mdi/fast-forward"));

var _rewind = _interopRequireDefault(require("@iconify/icons-mdi/rewind"));

var _volumeHigh = _interopRequireDefault(require("@iconify/icons-mdi/volume-high"));

var _volumeMute = _interopRequireDefault(require("@iconify/icons-mdi/volume-mute"));

var _repeat = _interopRequireDefault(require("@iconify/icons-mdi/repeat"));

var _repeatOff = _interopRequireDefault(require("@iconify/icons-mdi/repeat-off"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var H5AudioPlayer = function (_Component) {
  _inherits(H5AudioPlayer, _Component);

  function H5AudioPlayer(props) {
    var _this;

    _classCallCheck(this, H5AudioPlayer);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(H5AudioPlayer).call(this, props));

    _defineProperty(_assertThisInitialized(_this), "state", void 0);

    _defineProperty(_assertThisInitialized(_this), "audio", void 0);

    _defineProperty(_assertThisInitialized(_this), "volumeControl", void 0);

    _defineProperty(_assertThisInitialized(_this), "progressBar", void 0);

    _defineProperty(_assertThisInitialized(_this), "container", void 0);

    _defineProperty(_assertThisInitialized(_this), "lastVolume", void 0);

    _defineProperty(_assertThisInitialized(_this), "timeOnMouseMove", void 0);

    _defineProperty(_assertThisInitialized(_this), "listenTracker", void 0);

    _defineProperty(_assertThisInitialized(_this), "intervalId", void 0);

    _defineProperty(_assertThisInitialized(_this), "updateDisplayTime", function (currentTime) {
      var duration = _this.audio.duration;

      _this.setState({
        currentTime: currentTime,
        duration: _this.audio.duration,
        currentTimePos: "".concat((currentTime / duration * 100 || 0).toFixed(2), "%")
      });
    });

    _defineProperty(_assertThisInitialized(_this), "updateDisplayVolume", function (volume) {
      _this.setState({
        currentVolume: volume,
        currentVolumePos: "".concat((volume * 100).toFixed(0), "%")
      });
    });

    _defineProperty(_assertThisInitialized(_this), "togglePlay", function (e) {
      e.stopPropagation();

      if (_this.audio.paused && _this.audio.src) {
        var audioPromise = _this.audio.play();

        audioPromise.then(null).catch(function (err) {
          var onPlayError = _this.props.onPlayError;
          onPlayError && onPlayError(new Error(err));
        });
      } else if (!_this.audio.paused) {
        _this.audio.pause();
      }
    });

    _defineProperty(_assertThisInitialized(_this), "handleClickVolumeButton", function () {
      var currentVolume = _this.state.currentVolume;

      if (currentVolume > 0) {
        _this.lastVolume = _this.audio.volume;
        _this.audio.volume = 0;

        _this.updateDisplayVolume(0);
      } else {
        _this.audio.volume = _this.lastVolume;

        _this.updateDisplayVolume(_this.lastVolume);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "handleVolumnControlMouseDown", function (event) {
      event.stopPropagation();

      var _this$getCurrentVolum = _this.getCurrentVolume(event.nativeEvent),
          currentVolume = _this$getCurrentVolum.currentVolume,
          currentVolumePos = _this$getCurrentVolum.currentVolumePos;

      _this.audio.volume = currentVolume;

      _this.setState({
        isDraggingVolume: true,
        currentVolume: currentVolume,
        currentVolumePos: currentVolumePos
      });

      if (event.nativeEvent instanceof TouchEvent) {
        window.addEventListener('touchmove', _this.handleWindowMouseOrTouchMove);
        window.addEventListener('touchend', _this.handleWindowMouseOrTouchUp);
      } else if (event.nativeEvent instanceof MouseEvent) {
        window.addEventListener('mousemove', _this.handleWindowMouseOrTouchMove);
        window.addEventListener('mouseup', _this.handleWindowMouseOrTouchUp);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "handleWindowMouseOrTouchMove", function (event) {
      event.stopPropagation();
      var windowSelection = window.getSelection();

      if (windowSelection && windowSelection.type === 'Range') {
        windowSelection.empty();
      }

      var _this$state = _this.state,
          isDraggingVolume = _this$state.isDraggingVolume,
          isDraggingProgress = _this$state.isDraggingProgress;

      if (isDraggingVolume) {
        var _this$getCurrentVolum2 = _this.getCurrentVolume(event),
            currentVolume = _this$getCurrentVolum2.currentVolume,
            currentVolumePos = _this$getCurrentVolum2.currentVolumePos;

        _this.audio.volume = currentVolume;

        _this.setState({
          currentVolume: currentVolume,
          currentVolumePos: currentVolumePos
        });
      } else if (isDraggingProgress) {
        var _this$getCurrentProgr = _this.getCurrentProgress(event),
            _currentTime = _this$getCurrentProgr.currentTime,
            currentTimePos = _this$getCurrentProgr.currentTimePos;

        _this.timeOnMouseMove = _currentTime;

        _this.setState({
          currentTime: _currentTime,
          currentTimePos: currentTimePos
        });
      }
    });

    _defineProperty(_assertThisInitialized(_this), "handleWindowMouseOrTouchUp", function (event) {
      event.stopPropagation();

      _this.setState(function (prevState) {
        if (prevState.isDraggingProgress && isFinite(_this.timeOnMouseMove)) {
          _this.audio.currentTime = _this.timeOnMouseMove;
        }

        return {
          isDraggingVolume: false,
          isDraggingProgress: false
        };
      });

      if (event instanceof TouchEvent) {
        window.removeEventListener('touchmove', _this.handleWindowMouseOrTouchMove);
        window.removeEventListener('touchend', _this.handleWindowMouseOrTouchUp);
      } else {
        window.removeEventListener('mousemove', _this.handleWindowMouseOrTouchMove);
        window.removeEventListener('mouseup', _this.handleWindowMouseOrTouchUp);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "getCurrentVolume", function (event) {
      if (!_this.volumeControl) {
        return {
          currentVolume: _this.state.currentVolume,
          currentVolumePos: _this.state.currentVolumePos
        };
      }

      var volumeBarRect = _this.volumeControl.getBoundingClientRect();

      var relativePos = H5AudioPlayer.getPosX(event) - volumeBarRect.left;
      var currentVolume;
      var currentVolumePos;

      if (relativePos < 0) {
        currentVolume = 0;
        currentVolumePos = '0%';
      } else if (relativePos > volumeBarRect.width) {
        currentVolume = 1;
        currentVolumePos = "".concat(volumeBarRect.width / volumeBarRect.width * 100, "%");
      } else {
        currentVolume = relativePos / volumeBarRect.width;
        currentVolumePos = "".concat(relativePos / volumeBarRect.width * 100, "%");
      }

      return {
        currentVolume: currentVolume,
        currentVolumePos: currentVolumePos
      };
    });

    _defineProperty(_assertThisInitialized(_this), "handleMouseDownProgressBar", function (event) {
      event.stopPropagation();
      var isTouch = event.type.startsWith('touch');

      var _this$getCurrentProgr2 = _this.getCurrentProgress(event.nativeEvent),
          currentTime = _this$getCurrentProgr2.currentTime,
          currentTimePos = _this$getCurrentProgr2.currentTimePos;

      if (isFinite(currentTime)) {
        _this.timeOnMouseMove = currentTime;

        _this.setState({
          isDraggingProgress: true,
          currentTime: currentTime,
          currentTimePos: currentTimePos
        });

        if (isTouch) {
          window.addEventListener('touchmove', _this.handleWindowMouseOrTouchMove);
          window.addEventListener('touchend', _this.handleWindowMouseOrTouchUp);
        } else {
          window.addEventListener('mousemove', _this.handleWindowMouseOrTouchMove);
          window.addEventListener('mouseup', _this.handleWindowMouseOrTouchUp);
        }
      }
    });

    _defineProperty(_assertThisInitialized(_this), "handleClickLoopButton", function () {
      _this.setState(function (prevState) {
        return {
          isLoopEnabled: !prevState.isLoopEnabled
        };
      });
    });

    _defineProperty(_assertThisInitialized(_this), "handleClickRewind", function () {
      _this.setJumpTime(-_this.props.progressJumpStep);
    });

    _defineProperty(_assertThisInitialized(_this), "handleClickForward", function () {
      _this.setJumpTime(_this.props.progressJumpStep);
    });

    _defineProperty(_assertThisInitialized(_this), "setJumpTime", function (time) {
      var _this$audio = _this.audio,
          duration = _this$audio.duration,
          currentTime = _this$audio.currentTime;
      if (!isFinite(duration) || !isFinite(currentTime)) return;

      _this.setState(function (prevState) {
        var currentTime = prevState.currentTime + time / 1000;

        if (currentTime < 0) {
          _this.audio.currentTime = 0;
          currentTime = 0;
        } else if (currentTime > duration) {
          _this.audio.currentTime = duration;
          currentTime = duration;
        } else {
          _this.audio.currentTime = currentTime;
        }

        return {
          currentTime: currentTime,
          currentTimePos: "".concat(currentTime / duration * 100, "%")
        };
      });
    });

    _defineProperty(_assertThisInitialized(_this), "setJumpVolume", function (volume) {
      var newVolume = _this.audio.volume + volume;
      if (newVolume < 0) newVolume = 0;else if (newVolume > 1) newVolume = 1;
      _this.audio.volume = newVolume;

      _this.updateDisplayVolume(newVolume);
    });

    _defineProperty(_assertThisInitialized(_this), "getCurrentProgress", function (event) {
      if (!_this.audio.src || !isFinite(_this.audio.currentTime) || !_this.progressBar) {
        return {
          currentTime: 0,
          currentTimePos: '0%'
        };
      }

      var progressBarRect = _this.progressBar.getBoundingClientRect();

      var maxRelativePos = progressBarRect.width;
      var relativePos = H5AudioPlayer.getPosX(event) - progressBarRect.left;

      if (relativePos < 0) {
        relativePos = 0;
      } else if (relativePos > maxRelativePos) {
        relativePos = maxRelativePos;
      }

      var currentTime = _this.audio.duration * relativePos / maxRelativePos;
      return {
        currentTime: currentTime,
        currentTimePos: "".concat((relativePos / maxRelativePos * 100).toFixed(2), "%")
      };
    });

    _defineProperty(_assertThisInitialized(_this), "getDisplayTimeBySeconds", function (seconds) {
      if (!isFinite(seconds)) {
        return '00:00';
      }

      var addHeadingZero = H5AudioPlayer.addHeadingZero;
      var min = addHeadingZero(Math.floor(seconds / 60));
      var sec = addHeadingZero(Math.floor(seconds % 60));
      return "".concat(min, ":").concat(sec);
    });

    _defineProperty(_assertThisInitialized(_this), "setListenTrack", function () {
      if (!_this.listenTracker) {
        var listenInterval = _this.props.listenInterval;
        _this.listenTracker = setInterval(function () {
          _this.props.onListen && _this.props.onListen(_this.audio.currentTime);
        }, listenInterval);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "clearListenTrack", function () {
      if (_this.listenTracker) {
        clearInterval(_this.listenTracker);
        delete _this.listenTracker;
      }
    });

    _defineProperty(_assertThisInitialized(_this), "handleKeyDown", function (e) {
      switch (e.keyCode) {
        case 32:
          if (e.target === _this.container || e.target === _this.progressBar) {
            _this.togglePlay(e);
          }

          break;

        case 37:
          _this.handleClickRewind();

          break;

        case 39:
          _this.handleClickForward();

          break;

        case 38:
          _this.setJumpVolume(_this.props.volumeJumpStep);

          break;

        case 40:
          _this.setJumpVolume(-_this.props.volumeJumpStep);

          break;

        case 76:
          _this.handleClickLoopButton();

          break;

        case 77:
          _this.handleClickVolumeButton();

          break;
      }
    });

    var _volume = props.volume,
        muted = props.muted;
    _this.state = {
      duration: NaN,
      currentTime: 0,
      currentTimePos: '0%',
      currentVolume: muted ? 0 : _volume,
      currentVolumePos: muted ? '0%' : "".concat(_volume * 100, "%"),
      isDraggingProgress: false,
      isDraggingVolume: false,
      isPlaying: false,
      isLoopEnabled: _this.props.loop,
      downloadProgressArr: []
    };
    _this.lastVolume = _volume;
    _this.timeOnMouseMove = 0;
    return _this;
  }

  _createClass(H5AudioPlayer, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this2 = this;

      this.audio = this.audio || document.createElement('audio');
      var audio = this.audio;
      audio.volume = this.lastVolume;
      this.intervalId = setInterval(function () {
        if (!_this2.audio.paused && !_this2.state.isDraggingProgress && !!_this2.audio.duration) {
          _this2.updateDisplayTime(_this2.audio.currentTime);
        }
      }, this.props.progressUpdateInterval);
      audio.addEventListener('error', function (e) {
        _this2.props.onError && _this2.props.onError(e);
      });
      audio.addEventListener('canplay', function (e) {
        if (isFinite(_this2.audio.duration)) {
          _this2.setState({
            duration: _this2.audio.duration
          });
        }

        _this2.props.onCanPlay && _this2.props.onCanPlay(e);
      });
      audio.addEventListener('canplaythrough', function (e) {
        _this2.props.onCanPlayThrough && _this2.props.onCanPlayThrough(e);
      });
      audio.addEventListener('play', function (e) {
        _this2.setState({
          isPlaying: true
        });

        _this2.setListenTrack();

        _this2.props.onPlay && _this2.props.onPlay(e);
      });
      audio.addEventListener('abort', function (e) {
        _this2.clearListenTrack();

        var autoPlayAfterSrcChange = _this2.props.autoPlayAfterSrcChange;

        if (autoPlayAfterSrcChange) {
          _this2.audio.play();
        } else {
          _this2.setState({
            isPlaying: false,
            currentTime: 0,
            currentTimePos: '0%'
          });
        }

        _this2.props.onAbort && _this2.props.onAbort(e);
      });
      audio.addEventListener('ended', function (e) {
        _this2.clearListenTrack();

        _this2.props.onEnded && _this2.props.onEnded(e);
      });
      audio.addEventListener('pause', function (e) {
        _this2.clearListenTrack();

        if (!_this2.audio) return;

        _this2.setState({
          isPlaying: false
        });

        _this2.props.onPause && _this2.props.onPause(e);
      });
      audio.addEventListener('progress', function () {
        var audio = _this2.audio;
        var downloadProgressArr = [];

        for (var i = 0; i < audio.buffered.length; i++) {
          var bufferedStart = audio.buffered.start(i);
          var bufferedEnd = audio.buffered.end(i);
          downloadProgressArr.push({
            left: "".concat(Math.round(100 / audio.duration * bufferedStart) || 0, "%"),
            width: "".concat(Math.round(100 / audio.duration * (bufferedEnd - bufferedStart)) || 0, "%")
          });
        }

        _this2.setState({
          downloadProgressArr: downloadProgressArr
        });
      });
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      clearInterval(this.intervalId);
    }
  }, {
    key: "render",
    value: function render() {
      var _this3 = this;

      var _this$props = this.props,
          className = _this$props.className,
          src = _this$props.src,
          preload = _this$props.preload,
          autoPlay = _this$props.autoPlay,
          muted = _this$props.muted,
          crossOrigin = _this$props.crossOrigin,
          mediaGroup = _this$props.mediaGroup,
          showLoopControl = _this$props.showLoopControl,
          showVolumeControl = _this$props.showVolumeControl,
          showSkipControls = _this$props.showSkipControls,
          showJumpControls = _this$props.showJumpControls,
          onClickPrevious = _this$props.onClickPrevious,
          onClickNext = _this$props.onClickNext,
          showDownloadProgress = _this$props.showDownloadProgress,
          children = _this$props.children,
          style = _this$props.style;
      var _this$state2 = this.state,
          currentTime = _this$state2.currentTime,
          currentTimePos = _this$state2.currentTimePos,
          currentVolume = _this$state2.currentVolume,
          currentVolumePos = _this$state2.currentVolumePos,
          duration = _this$state2.duration,
          isPlaying = _this$state2.isPlaying,
          isLoopEnabled = _this$state2.isLoopEnabled,
          downloadProgressArr = _this$state2.downloadProgressArr;
      return _react.default.createElement("div", {
        role: "group",
        tabIndex: 0,
        "aria-label": "Audio Player",
        className: "rhap_container ".concat(className),
        onKeyDown: this.handleKeyDown,
        ref: function ref(_ref5) {
          _this3.container = _ref5;
        },
        style: style
      }, _react.default.createElement("audio", {
        src: src,
        controls: false,
        muted: muted,
        loop: isLoopEnabled,
        autoPlay: autoPlay,
        preload: preload,
        crossOrigin: crossOrigin,
        mediaGroup: mediaGroup,
        ref: function ref(_ref) {
          _this3.audio = _ref;
        }
      }, children), _react.default.createElement("div", {
        className: "rhap_progress-section"
      }, _react.default.createElement("div", {
        id: "rhap_current-time",
        className: "rhap_time rhap_current-time"
      }, this.getDisplayTimeBySeconds(currentTime)), _react.default.createElement("div", {
        className: "rhap_progress-container",
        ref: function ref(_ref3) {
          _this3.progressBar = _ref3;
        },
        "aria-label": "Audio Progress Control",
        "aria-describedby": "rhap_current-time",
        role: "progressbar",
        "aria-valuemin": 0,
        "aria-valuemax": 100,
        "aria-valuenow": Number(currentTimePos.split('%')[0]),
        tabIndex: 0,
        onMouseDown: this.handleMouseDownProgressBar,
        onTouchStart: this.handleMouseDownProgressBar
      }, _react.default.createElement("div", {
        className: "rhap_progress-bar ".concat(showDownloadProgress ? 'rhap_progress-bar-show-download' : '')
      }, _react.default.createElement("div", {
        className: "rhap_progress-indicator",
        style: {
          left: currentTimePos
        }
      }), showDownloadProgress && downloadProgressArr.map(function (_ref2, i) {
        var left = _ref2.left,
            width = _ref2.width;
        return _react.default.createElement("div", {
          key: i,
          className: "rhap_download-progress",
          style: {
            left: left,
            width: width
          }
        });
      }))), _react.default.createElement("div", {
        className: "rhap_time rhap_total-time"
      }, this.getDisplayTimeBySeconds(duration))), _react.default.createElement("div", {
        className: "rhap_controls-section"
      }, _react.default.createElement("div", {
        className: "rhap_additional-controls"
      }, showLoopControl && _react.default.createElement("button", {
        "aria-label": isLoopEnabled ? 'Enable Loop' : 'Disable Loop',
        className: "rhap_button-clear rhap_repeat-button",
        onClick: this.handleClickLoopButton
      }, _react.default.createElement(_react2.Icon, {
        icon: isLoopEnabled ? _repeat.default : _repeatOff.default
      }))), _react.default.createElement("div", {
        className: "rhap_main-controls"
      }, showSkipControls && _react.default.createElement("button", {
        "aria-label": "Previous",
        className: "rhap_button-clear rhap_main-controls-button rhap_skip-button",
        onClick: onClickPrevious
      }, _react.default.createElement(_react2.Icon, {
        icon: _skipPrevious.default
      })), showJumpControls && _react.default.createElement("button", {
        "aria-label": "Rewind",
        className: "rhap_button-clear rhap_main-controls-button rhap_rewind-button",
        onClick: this.handleClickRewind
      }, _react.default.createElement(_react2.Icon, {
        icon: _rewind.default
      })), _react.default.createElement("button", {
        "aria-label": isPlaying ? 'Pause' : 'Play',
        className: "rhap_button-clear rhap_main-controls-button rhap_play-pause-button",
        onClick: this.togglePlay
      }, isPlaying ? _react.default.createElement(_react2.Icon, {
        icon: _pauseCircle.default
      }) : _react.default.createElement(_react2.Icon, {
        icon: _playCircle.default
      })), showJumpControls && _react.default.createElement("button", {
        "aria-label": "Forward",
        className: "rhap_button-clear rhap_main-controls-button rhap_forward-button",
        onClick: this.handleClickForward
      }, _react.default.createElement(_react2.Icon, {
        icon: _fastForward.default
      })), showSkipControls && _react.default.createElement("button", {
        "aria-label": "Skip",
        className: "rhap_button-clear rhap_main-controls-button rhap_skip-button",
        onClick: onClickNext
      }, _react.default.createElement(_react2.Icon, {
        icon: _skipNext.default
      }))), _react.default.createElement("div", {
        className: "rhap_volume-controls"
      }, showVolumeControl && _react.default.createElement("div", {
        className: "rhap_volume-container"
      }, _react.default.createElement("button", {
        "aria-label": currentVolume ? 'Mute' : 'Unmute',
        onClick: this.handleClickVolumeButton,
        className: "rhap_button-clear rhap_volume-button"
      }, _react.default.createElement(_react2.Icon, {
        icon: currentVolume ? _volumeHigh.default : _volumeMute.default
      })), _react.default.createElement("div", {
        ref: function ref(_ref4) {
          _this3.volumeControl = _ref4;
        },
        onMouseDown: this.handleVolumnControlMouseDown,
        onTouchStart: this.handleVolumnControlMouseDown,
        role: "progressbar",
        "aria-label": "volume Control",
        "aria-valuemin": 0,
        "aria-valuemax": 100,
        "aria-valuenow": Number((currentVolume * 100).toFixed(0)),
        tabIndex: 0,
        className: "rhap_volume-bar-area"
      }, _react.default.createElement("div", {
        className: "rhap_volume-bar"
      }, _react.default.createElement("div", {
        className: "rhap_volume-indicator",
        style: {
          left: currentVolumePos
        }
      })))))));
    }
  }]);

  return H5AudioPlayer;
}(_react.Component);

_defineProperty(H5AudioPlayer, "defaultProps", {
  autoPlay: false,
  autoPlayAfterSrcChange: true,
  listenInterval: 1000,
  progressJumpStep: 5000,
  volumeJumpStep: 0.1,
  loop: false,
  muted: false,
  preload: 'auto',
  progressUpdateInterval: 20,
  volume: 1.0,
  className: '',
  showLoopControl: true,
  showVolumeControl: true,
  showJumpControls: true,
  showSkipControls: false,
  showDownloadProgress: true
});

_defineProperty(H5AudioPlayer, "addHeadingZero", function (num) {
  return num > 9 ? num.toString() : "0".concat(num);
});

_defineProperty(H5AudioPlayer, "getPosX", function (event) {
  var posX = 0;

  if (event instanceof TouchEvent) {
    posX = event.touches[0].pageX;
  } else if (event instanceof MouseEvent) {
    posX = event.pageX || event.clientX;
  }

  return posX;
});

var _default = H5AudioPlayer;
exports.default = _default;