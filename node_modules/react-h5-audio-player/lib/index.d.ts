import React, { Component } from 'react';
interface PlayerProps {
    /**
     * HTML5 Audio tag autoPlay property
     */
    autoPlay: boolean;
    /**
     * Whether to play music after src prop is changed
     */
    autoPlayAfterSrcChange: boolean;
    /**
     * custom classNames
     */
    className?: string;
    /**
     * The time interval to trigger onListen
     */
    listenInterval: number;
    progressJumpStep: number;
    volumeJumpStep: number;
    loop: boolean;
    muted: boolean;
    crossOrigin?: string;
    mediaGroup?: string;
    onAbort?: (e: Event) => void;
    onCanPlay?: (e: Event) => void;
    onCanPlayThrough?: (e: Event) => void;
    onEnded?: (e: Event) => void;
    onError?: (e: Event) => void;
    onListen?: (currentTime: number) => void;
    onPause?: (e: Event) => void;
    onPlay?: (e: Event) => void;
    onClickPrevious?: (e: React.SyntheticEvent) => void;
    onClickNext?: (e: React.SyntheticEvent) => void;
    onPlayError?: (err: Error) => void;
    /**
     * HTML5 Audio tag preload property
     */
    preload: 'auto' | 'metadata' | 'none';
    /**
     * Pregress indicator refresh interval
     */
    progressUpdateInterval: number;
    /**
     * HTML5 Audio tag src property
     */
    src?: string;
    volume: number;
    showLoopControl: boolean;
    showVolumeControl: boolean;
    showJumpControls: boolean;
    showSkipControls: boolean;
    showDownloadProgress: boolean;
    children?: React.ReactNode;
    style?: React.CSSProperties;
}
interface PlayerState {
    duration: number;
    currentTime: number;
    currentTimePos: string;
    currentVolume: number;
    currentVolumePos: string;
    isDraggingProgress: boolean;
    isDraggingVolume: boolean;
    isPlaying: boolean;
    isLoopEnabled: boolean;
    downloadProgressArr: DownloadProgress[];
}
interface DownloadProgress {
    left: string;
    width: string;
}
interface TimePosInfo {
    currentTime: number;
    currentTimePos: string;
}
interface VolumePosInfo {
    currentVolume: number;
    currentVolumePos: string;
}
declare class H5AudioPlayer extends Component<PlayerProps, PlayerState> {
    static defaultProps: {
        autoPlay: boolean;
        autoPlayAfterSrcChange: boolean;
        listenInterval: number;
        progressJumpStep: number;
        volumeJumpStep: number;
        loop: boolean;
        muted: boolean;
        preload: string;
        progressUpdateInterval: number;
        volume: number;
        className: string;
        showLoopControl: boolean;
        showVolumeControl: boolean;
        showJumpControls: boolean;
        showSkipControls: boolean;
        showDownloadProgress: boolean;
    };
    static addHeadingZero: (num: number) => string;
    static getPosX: (event: MouseEvent | TouchEvent) => number;
    state: PlayerState;
    audio?: HTMLAudioElement;
    volumeControl?: HTMLElement;
    progressBar?: HTMLElement;
    container?: HTMLElement;
    lastVolume: number;
    timeOnMouseMove: number;
    listenTracker?: number;
    intervalId?: number;
    constructor(props: PlayerProps);
    updateDisplayTime: (currentTime: number) => void;
    updateDisplayVolume: (volume: number) => void;
    togglePlay: (e: React.SyntheticEvent<Element, Event>) => void;
    handleClickVolumeButton: () => void;
    handleVolumnControlMouseDown: (event: React.MouseEvent<Element, MouseEvent> | React.TouchEvent<Element>) => void;
    handleWindowMouseOrTouchMove: (event: MouseEvent | TouchEvent) => void;
    handleWindowMouseOrTouchUp: (event: MouseEvent | TouchEvent) => void;
    getCurrentVolume: (event: MouseEvent | TouchEvent) => VolumePosInfo;
    handleMouseDownProgressBar: (event: React.MouseEvent<Element, MouseEvent> | React.TouchEvent<Element>) => void;
    handleClickLoopButton: () => void;
    handleClickRewind: () => void;
    handleClickForward: () => void;
    setJumpTime: (time: number) => void;
    setJumpVolume: (volume: number) => void;
    getCurrentProgress: (event: MouseEvent | TouchEvent) => TimePosInfo;
    getDisplayTimeBySeconds: (seconds: number) => string;
    /**
     * Set an interval to call props.onListen every props.listenInterval time period
     */
    setListenTrack: () => void;
    /**
     * Clear the onListen interval
     */
    clearListenTrack: () => void;
    handleKeyDown: (e: React.KeyboardEvent<Element>) => void;
    componentDidMount(): void;
    componentWillUnmount(): void;
    render(): React.ReactNode;
}
export default H5AudioPlayer;
